name: Deploy order service

on:
  workflow_run:
    workflows:
      - CI Pipelines
    types:
      - completed
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS Context
        run: az aks get-credentials --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Install envsubst
        run: |
          sudo apt-get update
          sudo apt-get install -y gettext-base

      - name: Set environment variables
        run: |
          export IMAGE_TAG=$(git rev-parse --short HEAD)
          echo "IMAGE_TAG: $IMAGE_TAG"

      - name: Replace variables in Kubernetes manifest
        run: |
          export IMAGE_TAG=$(git rev-parse --short HEAD)
          envsubst < ./kubernetes/services/bookstore-order-service.yaml > ./kubernetes/services/bookstore-order-service-substituted.yaml

      - name: Cleanup stuck bookstore-order-service pods
        run: |
          echo "Checking and force deleting stuck bookstore-order-service Pods..."
          kubectl get pods -n bookstore | grep bookstore-order-service || true
          
          kubectl delete pod -n bookstore --field-selector=status.phase==Failed --grace-period=0 --force || true
        
          EVICTED_PODS=$(kubectl get pods -n bookstore | grep bookstore-order-service | grep "Evicted" | awk '{print $1}')
          if [[ -n "$EVICTED_PODS" ]]; then
            echo "Deleting evicted bookstore-order-service pods: $EVICTED_PODS"
            echo "$EVICTED_PODS" | xargs -r kubectl delete pod -n bookstore --grace-period=0 --force --ignore-not-found --wait=false
          else
            echo "No evicted bookstore-order-service pods found."
          fi
          
          TERMINATING_PODS=$(kubectl get pods -n bookstore | grep bookstore-order-service | grep "Terminating" | awk '{print $1}')
          if [[ -n "$TERMINATING_PODS" ]]; then
            echo "Force deleting terminating bookstore-order-service pods: $TERMINATING_PODS"
            echo "$TERMINATING_PODS" | xargs -r kubectl delete pod -n bookstore --grace-period=0 --force --ignore-not-found --wait=false
          else
            echo "No terminating bookstore-order-service pods found."
          fi

      - name: Deploy Order Service
        run: |
          kubectl apply -f ./kubernetes/services/bookstore-order-service-substituted.yaml

      - name: Wait for new Pods to be ready
        run: |
          kubectl wait --for=condition=Ready pod -l app=bookstore-order-service -n bookstore --timeout=300s

      - name: Wait for Deployment
        run: |
          kubectl rollout status deployment bookstore-order-service -n bookstore --timeout=300s

      - name: Rollback on Failure
        if: failure()
        run: |
          if kubectl rollout history deployment/bookstore-order-service -n bookstore | grep -q "REVISION"; then
            echo "Rolling back bookstore-order-service..."
            kubectl rollout undo deployment/bookstore-order-service -n bookstore
          else
            echo "No rollback history found, skipping..."
          fi