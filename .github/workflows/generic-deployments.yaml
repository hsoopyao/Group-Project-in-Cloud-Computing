name: Deploy-AKS

on:
  workflow_run:
    workflows:
      - CI Pipelines
    types:
      - completed
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS Context
        run: az aks get-credentials --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Install envsubst
        run: |
          sudo apt-get update
          sudo apt-get install -y gettext-base

      - name: Set environment variables
        run: |
          export IMAGE_TAG=$(git rev-parse --short HEAD)
          echo "IMAGE_TAG: $IMAGE_TAG"

      - name: Replace variables in Kubernetes manifest
        run: |
          export IMAGE_TAG=$(git rev-parse --short HEAD)
          envsubst < ./kubernetes/postgres/postgres-manifest.yaml > ./kubernetes/postgres/postgres-manifest-substituted.yaml
          envsubst < ./kubernetes/services/bookstore-account-service.yaml > ./kubernetes/services/bookstore-account-service-substituted.yaml
#          envsubst < ./kubernetes/services/bookstore-catalog-service.yaml > ./kubernetes/services/bookstore-catalog-service-substituted.yaml
          envsubst < ./kubernetes/services/bookstore-order-service.yaml > ./kubernetes/services/bookstore-order-service-substituted.yaml
          envsubst < ./kubernetes/services/bookstore-api-gateway-service.yaml > ./kubernetes/services/bookstore-api-gateway-service-substituted.yaml
          envsubst < ./kubernetes/services/frontend-manifest.yaml > ./kubernetes/services/frontend-manifest-substituted.yaml
          envsubst < ./kubernetes/services/bookstore-ingress.yaml > ./kubernetes/services/bookstore-ingress-substituted.yaml
          envsubst < ./kubernetes/monitors/prometheus-manifest.yaml > ./kubernetes/monitors/prometheus-manifest-substituted.yaml

#      - name: Scale down bookstore-catalog-service before deployment
#        run: |
#          echo "Scaling down bookstore-catalog-service to avoid rollout issues..."
#          kubectl scale deployment bookstore-catalog-service --replicas=0 -n bookstore || true
#          sleep 5
#
#      - name: Delete stuck pods
#        run: |
#          echo "Checking for stuck Pods..."
#          kubectl get pods -n bookstore | grep "bookstore-catalog-service" | grep Terminating || true
#          kubectl delete pods -n bookstore --field-selector=status.phase==Terminating --grace-period=0 --force || true

      - name: Cleanup stuck bookstore-order-service pods
        run: |
          echo "Checking and force deleting stuck bookstore-order-service Pods..."
          kubectl get pods -n bookstore | grep bookstore-order-service || true
          
          # 删除 Failed Pods
          kubectl delete pod -n bookstore --field-selector=status.phase==Failed --grace-period=0 --force || true
          
          # 删除 Evicted Pods
          EVICTED_PODS=$(kubectl get pods -n bookstore | grep bookstore-order-service | grep "Evicted" | awk '{print $1}')
          if [[ -n "$EVICTED_PODS" ]]; then
            echo "Deleting evicted bookstore-order-service pods: $EVICTED_PODS"
            echo "$EVICTED_PODS" | xargs -r kubectl delete pod -n bookstore --grace-period=0 --force --ignore-not-found --wait=false
          else
            echo "No evicted bookstore-order-service pods found."
          fi
          
          # 删除 Terminating Pods
          TERMINATING_PODS=$(kubectl get pods -n bookstore | grep bookstore-order-service | grep "Terminating" | awk '{print $1}')
          if [[ -n "$TERMINATING_PODS" ]]; then
            echo "Force deleting terminating bookstore-order-service pods: $TERMINATING_PODS"
            echo "$TERMINATING_PODS" | xargs -r kubectl delete pod -n bookstore --grace-period=0 --force --ignore-not-found --wait=false
          else
            echo "No terminating bookstore-order-service pods found."
          fi

      - name: Deploy-AKS
        run: |
          kubectl apply -f ./kubernetes/postgres/postgres-manifest-substituted.yaml
          kubectl apply -f ./kubernetes/monitors/zipkin-manifest.yaml
          kubectl apply -f ./kubernetes/services/bookstore-consul.yaml
          kubectl apply -f ./kubernetes/services/bookstore-account-service-substituted.yaml
#          kubectl apply -f ./kubernetes/services/bookstore-catalog-service-substituted.yaml
          kubectl apply -f ./kubernetes/services/bookstore-order-service-substituted.yaml
          kubectl apply -f ./kubernetes/services/bookstore-api-gateway-service-substituted.yaml
          kubectl apply -f ./kubernetes/services/frontend-manifest-substituted.yaml
          kubectl apply -f ./kubernetes/services/bookstore-ingress-substituted.yaml
          kubectl apply -f ./kubernetes/monitors/prometheus-manifest-substituted.yaml

#      - name: Scale up bookstore-catalog-service after deployment
#        run: |
#          kubectl scale deployment bookstore-catalog-service --replicas=1 -n bookstore

      - name: Wait for Deployment to be Ready
        run: |
          set -e
          for service in bookstore-account-service bookstore-order-service bookstore-api-gateway-service; do
            echo "Waiting for rollout of $service..."
            n=0
            until [ $n -ge 3 ]; do
              kubectl rollout status deployment $service -n bookstore --timeout=60s && break
              n=$((n+1))
              echo "Retrying rollout check for $service ($n/3)..."
              sleep 10
            done
            if [ $n -eq 3 ]; then
              echo "Failed to rollout $service after 3 attempts."
              exit 1
            fi
          done


      - name: Rollback on Failure
        if: failure()
        run: |
          echo "Deployment failed, rolling back..."
          for service in bookstore-account-service bookstore-order-service bookstore-api-gateway-service; do
            if kubectl rollout history deployment/$service -n bookstore | grep -q "REVISION"; then
              echo "Rolling back $service..."
              kubectl rollout undo deployment/$service -n bookstore
            else
              echo "No rollback history found for $service, skipping..."
            fi
          done