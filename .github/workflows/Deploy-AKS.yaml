name: Deploy-AKS

on:
  workflow_run:
    workflows:
      - CI Pipelines
    types:
      - completed
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS Context
        run: az aks get-credentials --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Set AKS context
        run: az aks get-credentials --resource-group cloud-computing-gp --name bookstore-application

      - name: Install envsubst
        run: |
          sudo apt-get update
          sudo apt-get install -y gettext-base

      - name: Set environment variables
        run: |
          export IMAGE_TAG=$(git rev-parse --short HEAD)
          echo "IMAGE_TAG: $IMAGE_TAG"
  
      - name: Replace variables in Kubernetes manifest
        run: |
          export IMAGE_TAG=$(git rev-parse --short HEAD)
          envsubst < ./kubernetes/postgres/postgres-manifest.yaml > ./kubernetes/postgres/postgres-manifest-substituted.yaml
          envsubst < ./kubernetes/services/bookstore-account-service.yaml > ./kubernetes/services/bookstore-account-service-substituted.yaml
          envsubst < ./kubernetes/services/bookstore-catalog-service.yaml > ./kubernetes/services/bookstore-catalog-service-substituted.yaml
          envsubst < ./kubernetes/services/bookstore-order-service.yaml > ./kubernetes/services/bookstore-order-service-substituted.yaml
          envsubst < ./kubernetes/services/bookstore-api-gateway-service.yaml > ./kubernetes/services/bookstore-api-gateway-service-substituted.yaml
          envsubst < ./kubernetes/services/frontend-manifest.yaml > ./kubernetes/services/frontend-manifest-substituted.yaml
          envsubst < ./kubernetes/services/bookstore-ingress.yaml > ./kubernetes/services/bookstore-ingress-substituted.yaml
          envsubst < ./kubernetes/monitors/prometheus-manifest.yaml > ./kubernetes/monitors/prometheus-manifest-substituted.yaml

      - name: Scale down bookstore-catalog-service before deployment
        run: |
          echo "Scaling down bookstore-catalog-service to 1 replica to avoid HPA issues..."
          kubectl scale deployment bookstore-catalog-service --replicas=1 -n bookstore || true

      - name: Deploy-AKS
        run: |
          kubectl apply -f ./kubernetes/postgres/postgres-manifest-substituted.yaml
          kubectl apply -f ./kubernetes/monitors/zipkin-manifest.yaml
          kubectl apply -f ./kubernetes/services/bookstore-consul.yaml
          kubectl apply -f ./kubernetes/services/bookstore-account-service-substituted.yaml
          kubectl apply -f ./kubernetes/services/bookstore-catalog-service-substituted.yaml
          kubectl apply -f ./kubernetes/services/bookstore-order-service-substituted.yaml
          kubectl apply -f ./kubernetes/services/bookstore-api-gateway-service-substituted.yaml
          kubectl apply -f ./kubernetes/services/frontend-manifest-substituted.yaml
          kubectl apply -f ./kubernetes/services/bookstore-ingress-substituted.yaml
          kubectl apply -f ./kubernetes/monitors/prometheus-manifest-substituted.yaml

      - name: Delete old ReplicaSets (clean up)
        run: |
          kubectl get rs -n bookstore --no-headers | awk '$2==0 {print $1}' | xargs -r kubectl delete rs -n bookstore

      - name: Wait for Deployment to be Ready
        run: |
          set -e
          kubectl rollout status deployment bookstore-account-service -n bookstore --timeout=60s || exit 1
          kubectl rollout status deployment bookstore-catalog-service -n bookstore --timeout=60s || exit 1
          kubectl rollout status deployment bookstore-order-service -n bookstore --timeout=60s || exit 1
          kubectl rollout status deployment bookstore-api-gateway-service -n bookstore --timeout=60s || exit 1

      - name: Rollback on Failure
        if: failure()
        run: |
          echo "Deployment failed, rolling back..."
          for service in bookstore-account-service bookstore-catalog-service bookstore-order-service bookstore-api-gateway-service; do
            if kubectl rollout history deployment/$service -n bookstore | grep -q "REVISION"; then
              echo "Rolling back $service..."
              kubectl rollout undo deployment/$service -n bookstore
            else
              echo "No rollback history found for $service, skipping..."
            fi
          done
